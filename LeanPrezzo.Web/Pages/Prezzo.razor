@page "/prezzo"
@inject HttpClient Http

<style>
    .grid {
        display: grid;
        grid-gap: 10px;
        grid-row-gap: 10px;
        grid-template-columns: repeat(3, 1fr);
    }

    .cell {
        flex: 0 0 32%; /* don't grow, don't shrink, width */
        height: 50px;
        margin-top: 5px;
        margin-bottom: 5px;
        margin-left: 5px;
        margin-right: 5px;
        background-color: #999;
        border-radius: 5px;
    }

    .cell:nth-child(3n) {
        background-color: #F00;
    }
</style>
<h1>LeanPrezzo</h1>
<br />

@if (prezzo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <h2>@prezzo.Title</h2>
        <p>@prezzo.Description</p>
        <br />
        <div class="grid">
            <div class="cell">item</div>
            <div class="cell">item</div>
            <div class="cell">item</div>
            <div class="cell">item</div>
            <div class="cell">item</div>
            <div class="cell">item</div>
            <div class="cell">item</div>
            <div class="cell">item</div>
            <div class="cell">item</div>
        </div>
        <br />

    </div>
}
    

    @code {
        private libLeanPrezzo.Topic newTopic = new libLeanPrezzo.Topic();
        private libLeanPrezzo.Presentation prezzo;
        private string success = "";

        protected override async Task OnInitializedAsync()
        {
            //var json = await Http.GetFromJsonAsync("sample-data/testprezzo.json");
            prezzo = await Http.GetFromJsonAsync<libLeanPrezzo.Presentation>("sample-data/testprezzo.json");
        }

        public void HandleValidVote(int topicId)
        {
            // prezzo.Topics[topicId].ApplyVote;
            success = "success";
        }

    }
