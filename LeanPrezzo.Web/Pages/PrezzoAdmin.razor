@page "/prezzo/admin"
@inject HttpClient Http

<h1>LeanPrezzo Admin</h1>
<br />

@if (prezzo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <h2>@prezzo.Title</h2>
        <p>@prezzo.Description</p>
        <br />
        <table class="table">
            <thead>
                <tr>
                    <th>Topic</th>
                    <th>Description</th>
                    <th>Current Votes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var topic in prezzo.Topics)
                {
                    <tr @key="@topic">
                        <td>@topic.Title</td>
                        <td>@topic.Description</td>
                        <td>@topic.CurrentVotes</td>
                        <td><button type="button" @onclick="@(() => prezzo.Topics.Remove(topic))">Remove</button></td>
                    </tr>
                }
            </tbody>
        </table>
        <br />

    </div>
}
@if (newTopic == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
            Add a Topic
        </div>
        <div class="card-body">
            <EditForm Model="@newTopic" OnValidSubmit="@HandleValidSubmit">
                <div class="form-group">
                    <label for="titleInput">Title</label>
                    <InputText class="form-control" id="titleInput" @bind-Value="newTopic.Title" />
                </div>
                <div class="form-group">
                    <label for="titleInput">Description</label>
                    <InputText class="form-control" id="descriptionInput" @bind-Value="newTopic.Description" />
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </EditForm>
            <div>@success</div>
            <div>
                <button type="button" class="btn btn-primary btn-lg" style="margin:10px" onclick="@OnParametersSetAsync()">Button</button>
            </div>
        </div>
    </div>
}

@if (Message == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
            What is your Name?
        </div>
        <div class="card-body">
            <EditForm Model="@Message" OnValidSubmit="@OnParametersSetAsync">
                <div class="form-group">
                    <label for="titleInput">Name</label>
                    <InputText class="form-control" id="titleInput" @bind-Value="Message.Message" />
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </EditForm>
            </div>
        </div>
}



@code {
    private libLeanPrezzo.Topic newTopic = new libLeanPrezzo.Topic();
    private returnObject Message = new returnObject();

    private libLeanPrezzo.Presentation prezzo;
    private string success = "";

    protected override async Task OnInitializedAsync()
    {
        //var json = await Http.GetFromJsonAsync("sample-data/testprezzo.json");

        prezzo = await Http.GetFromJsonAsync<libLeanPrezzo.Presentation>("sample-data/the-rest-of-the-org.json");
        //prezzo = await Http.GetFromJsonAsync<libLeanPrezzo.Presentation>("sample-data/testprezzo.json");

    }

    protected override async Task OnParametersSetAsync()
    {
        var url = "http://localhost:5800/api/Function1?name=Ryan";
        Message = await Http.GetFromJsonAsync<returnObject>(url);
        Console.WriteLine(Message.Message);

        Message = new returnObject();

    }

    public void HandleValidSubmit()
    {
        prezzo.AddTopic(newTopic);
        success = "success";
        newTopic = new libLeanPrezzo.Topic();
    }



    class returnObject
    {
        public string Message { get; set; }

    }
}
